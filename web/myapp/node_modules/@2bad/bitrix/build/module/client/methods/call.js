import { stringify as toQuery } from 'qs';
import isArray from '../../utils/isArray';
export const handlePayload = (payload) => {
    if (payload.error) {
        throw new Error(`[call] failed to get the resource: ${payload.error}.`);
    }
    if (payload.result && payload.result.result_error) {
        const resultErrors = payload.result.result_error;
        const errors = isArray(resultErrors) ? resultErrors : Object.values(resultErrors);
        if (errors.length > 0) {
            throw new Error(`[batch] failed to process. Received errors in ${errors.length} commands:\n${errors.join('\n')}`);
        }
    }
    return payload;
};
export default ({ get }) => {
    const call = (method, params) => get(method, { query: toQuery(params) })
        .then(({ body }) => handlePayload(body));
    return call;
};
//# sourceMappingURL=call.js.map