import { Command } from '../../commands';
import { ListableMethod, MethodParams, MethodPayloadType } from '../../methods';
import { BatchPayload, ListPayload } from '../../payloads';
import { Batch } from './batch';
import { Call } from './call';
export declare const fillWithCommands: <C extends Command>({ method, params }: C, start: number, toProcess: number, entriesPerCommand: number) => readonly {
    readonly method: C["method"];
    readonly params?: C["params"] | undefined;
}[];
export declare const highest: (input: readonly (number | undefined)[] | Record<string, number | undefined>) => number | undefined;
export declare const batchToListPayload: <P>(payload: BatchPayload<Record<string, P> | readonly P[]>) => ListPayload<P>;
interface Dependencies {
    readonly call: Call;
    readonly batch: Batch;
}
export declare type List = <M extends ListableMethod>(method: M, params: MethodParams<M>) => Promise<ListPayload<MethodPayloadType<M>>>;
declare const _default: ({ call, batch }: Dependencies) => List;
export default _default;
