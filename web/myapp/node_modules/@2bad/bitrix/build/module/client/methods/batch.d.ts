import { GotJSONFn } from 'got';
import { Commands } from '../../commands';
import { Method, MethodPayloadType } from '../../methods';
import { BatchPayload } from '../../payloads';
export declare const MAX_COMMANDS_PER_BATCH = 50;
export declare const chunkCommands: <C extends Commands>(commands: C, size?: number) => readonly C[];
export declare const prepareCommandsQueries: <C extends Commands, R = { [K in keyof C]: string; }>(commands: C) => R;
export declare const mergeBatchPayloads: <B extends BatchPayload<any>, P = B extends BatchPayload<infer U> ? U : never>(payloads: readonly B[]) => BatchPayload<P>;
export declare type CommandsPayloads<C extends Commands, CM = {
    [K in keyof C]: C[K] extends {
        readonly method: infer M;
    } ? M : never;
}> = {
    [K in keyof CM]: MethodPayloadType<CM[K] extends Method ? CM[K] : never>;
};
export declare type Batch = <C extends Commands, P = CommandsPayloads<C>>(commands: C, commandsPerRequest?: number) => Promise<BatchPayload<P>>;
interface Dependencies {
    readonly get: GotJSONFn;
}
declare const _default: ({ get }: Dependencies) => Batch;
export default _default;
